name: auto-approve
on:
  pull_request:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review

permissions: {}

jobs:
  approve:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      actions: read
      checks: read
    if: contains(github.event.pull_request.labels.*.name, 'auto-approve') && contains('hakenmt,github-bot', github.event.pull_request.user.login)
    
    env:
      SHA: ${{ github.event.pull_request.head.sha }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TIMEOUT: 600
      INTERVAL: 10
      WORKFLOW_NAME: build
      TERMINATING_STATUS: "completed,action_required,cancelled,failure,neutral,skipped,stale,success,timed_out"

    steps:
      - name: Wait for Build to Complete
        id: wait-for-build
        run: | 
          START_TIME=$(date +%s)

          while true; do
            # Fetch latest workflow run matching SHA and workflow name
            WORKFLOW_RUN=$(gh api /repos/${{ github.repository }}/actions/runs \
            --jq ".workflow_runs | map(select(.head_sha == \"$SHA\" and .name == \"$WORKFLOW_NAME\")) | first")

            if [ -z "$WORKFLOW_RUN" ]; then
              echo "No build workflow run found for commit $SHA."
              echo "conclusion=skipped" >> "$GITHUB_OUTPUT"

              {
                  echo "conclusion=skipped"
                  echo "sha=$SHA"
              } >> builddata.txt

              break
            else
              STATUS=$(echo "$WORKFLOW_RUN" | jq -r '.conclusion')
              RUN_NUMBER=$(echo "$WORKFLOW_RUN" | jq -r '.run_number')
              RUN_ID=$(echo "$WORKFLOW_RUN" | jq -r '.id')
              RUN_ATTEMPT=$(echo "$WORKFLOW_RUN" | jq -r '.run_attempt')
              WORKFLOW_ID=$(echo "$WORKFLOW_RUN" | jq -r '.workflow_id')

              echo "Build SHA: $SHA"
              echo "Build workflow run: $RUN_ID"
              echo "Build workflow status: $STATUS"

              if [[ ",$TERMINATING_STATUS," == *",$STATUS,"* ]]; then
                echo "Build workflow finished with conclusion: $STATUS"
                echo "conclusion=$STATUS" >> "$GITHUB_OUTPUT"
                
                {
                  echo "conclusion=$STATUS"
                  echo "run_id=$RUN_ID"
                  echo "run_number=$RUN_NUMBER"
                  echo "workflow_id=$WORKFLOW_ID"
                  echo "run_attempt=$RUN_ATTEMPT"
                  echo "sha=$SHA"
                } >> builddata.txt
                break
              fi
            fi

            # Check if timeout has been reached
            ELAPSED=$(( $(date +%s) - START_TIME ))
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "Timeout reached. Build workflow did not succeed within $TIMEOUT seconds."
              echo "conclusion=timed_out" >> "$GITHUB_OUTPUT"
              break
            fi

            sleep $INTERVAL
          done

      - name: Fail If Build Did Not Succeed
        id: fail
        if: ${{ !contains('success,neutral,skipped', steps.wait-for-build.outputs.conclusion) }}
        run: |
          echo "‚ùå Build workflow failed. Conclusion: ${{ steps.wait-for-build.outputs.conclusion }}"
          exit 1
          
      - name: Auto-Approve PR
        id: auto-approve
        uses: hmarr/auto-approve-action@v2.2.1
        if: contains('success,neutral,skipped', steps.wait-for-build.outputs.conclusion)
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload data artifact
        id: create-artifact
        uses: actions/upload-artifact@v4
        with:
          name: BuildDataArtifact
          path: ${{ github.workspace }}/builddata.txt