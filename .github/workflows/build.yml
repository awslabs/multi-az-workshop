name: build
on:
  push:
    branches:
      - vNext
  pull_request:
    branches:
      - vNext
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CDK_LOCATION: "cdk"
      PROJECT_NAME: ${{ github.event.repository.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Install node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'

      - name: Install cdk
        run: |
          npm install aws-cdk -g
          cdk --version

      - name: Create tmp
        run: mkdir -p ${{ github.workspace }}/tmp

      - name: Create assets
        run: mkdir -p ${{ github.workspace }}/assets

      - name: Set versions
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

          # Read the JSON file and iterate over each key-value pair
          for key in $(jq -r 'keys[]' ${{ github.workspace }}/build/versions.json); do
            value=$(jq -r ".\"$key\"" ${{ github.workspace }}/build/versions.json)
            echo "Setting environment variable for $key with value $value"
            # Set the environment variable
            echo "$key=$value" >> $GITHUB_ENV
          done

      - name: Create helm lambda layer
        run: |
          file=helm-v$HELM-linux-arm64.tar.gz
          curl --location https://get.helm.sh/$file --output /tmp/$file
          tar -zxvf /tmp/$file --directory /tmp
          mkdir -p ${{ github.workspace }}/$CDK_LOCATION/layer/helm
          cp /tmp/linux-arm64/helm ${{ github.workspace }}/$CDK_LOCATION/layer/helm/
          chmod 0755 ${{ github.workspace }}/$CDK_LOCATION/layer/helm/helm
          cd ${{ github.workspace }}/$CDK_LOCATION/layer
          zip -r ${{ github.workspace }}/$CDK_LOCATION/helm-layer.zip .

      - name: Get kubectl
        run: |
          file=kubectl
          curl --location https://dl.k8s.io/release/v$KUBECTL/bin/linux/arm64/$file --output ${{ github.workspace }}/assets/$file
          
      - name: Get istio
        run: |
          BASE=https://istio-release.storage.googleapis.com/charts
          istio_deps=("base-$ISTIO.tgz" "istiod-$ISTIO.tgz" "gateway-$ISTIO.tgz" "cni-$ISTIO.tgz")
          for file in ${istio_deps[@]}; do
            curl --location $BASE/$file --output ${{ github.workspace }}/assets/${file%%-*}.tgz
          done

      - name: Get AWS load balancer controller
        run: |
          file=aws-load-balancer-controller-$LB_CONTROLLER_HELM.tgz
          curl --location https://aws.github.io/eks-charts/$file --output ${{ github.workspace }}/assets/${file%%-*}.tgz

      - name: Pull istio container images
        run: |
          istio_containers=("istio/install-cni:$ISTIO" "istio/pilot:$ISTIO" "istio/proxyv2:$ISTIO")
          for file in ${istio_containers[@]}; do
            docker pull $file
            name=$(echo $file | cut -d '/' -f2 | cut -d ':' -f1)
            docker save $file | gzip > ${{ github.workspace }}/assets/$name.tar.gz
          done

      - name: Pull AWS container images
        run: |
          aws_containers=("eks/aws-load-balancer-controller:$LB_CONTROLLER_CONTAINER-linux_arm64" "cloudwatch-agent/cloudwatch-agent:latest")
          BASE=public.ecr.aws
          for file in ${aws_containers[@]}; do
            docker pull $BASE/$file
            name=$(echo $file | cut -d '/' -f2 | cut -d ':' -f1)
            docker save $file | gzip > ${{ github.workspace }}/assets/$name.tar.gz
          done

      - name: Build arm64 web app
        run: |
          rm -rf ${{ github.workspace }}/app-src/output
          mkdir -p ${{ github.workspace }}/app-src/output
          mkdir -p ${{ github.workspace }}/app-src/output/src
          cd ${{ github.workspace }}/app-src
          dotnet publish --configuration Release --runtime linux-arm64 --output ${{ github.workspace }}/app-src/output/src -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true --self-contained
          cd ${{ github.workspace }}/app-src/output
          zip -r ${{ github.workspace }}/assets/app_arm64.zip src/
          cd ${{ github.workspace }}/app-src
          zip -r ${{ github.workspace }}/assets/app_arm64.zip apache/ scripts/ appspec.yml
          rm -rf ${{ github.workspace }}/app-src/output

      - name: Build failing arm64 web app
        run: |
          rm -rf ${{ github.workspace }}/app-src/output
          mkdir -p ${{ github.workspace }}/app-src/output
          mkdir -p ${{ github.workspace }}/app-src/output/src
          cd ${{ github.workspace }}/app-src
          dotnet publish --configuration Release --runtime linux-arm64 --output ${{ github.workspace }}/app-src/output/src -p:DefineConstants="FAIL" -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true --self-contained
          cd ${{ github.workspace }}/app-src/output
          zip -r ${{ github.workspace }}/assets/app_arm64_fail.zip src/
          cd ${{ github.workspace }}/app-src
          zip -r ${{ github.workspace }}/assets/app_arm64_fail.zip apache/ scripts/ appspec.yml
          rm -rf ${{ github.workspace }}/app-src/output

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build arm64 container
        run: |
          rm -rf ${{ github.workspace }}/app-src/output
          mkdir -p ${{ github.workspace }}/app-src/output
          mkdir -p ${{ github.workspace }}/app-src/output/src
          cd ${{ github.workspace }}/app-src
          dotnet publish --configuration Release --runtime linux-musl-arm64 --output ${{ github.workspace }}/app-src/output/src -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true --self-contained
          cd ${{ github.workspace }}/app-src/output
          docker buildx build --tag $PROJECT_NAME/app:latest --platform linux/arm64 --build-arg SRC=src --file ${{ github.workspace }}/build/dockerfile .
          docker save $PROJECT_NAME/app:latest | gzip > ${{ github.workspace }}/assets/container.tar.gz
          rm -rf ${{ github.workspace }}/app-src/output

      - name: Build assets
        run: |
          cd ${{ github.workspace }}/$CDK_LOCATION
          cdk synth --quiet
          chmod +x ${{ github.workspace }}/build/package.py
          ${{ github.workspace }}/build/package.py $PROJECT_NAME ${{ github.workspace }} $CDK_LOCATION
          cd ${{ github.workspace }}/assets
          zip -r ${{ github.workspace }}/content.zip .
          cp ${{ github.workspace }}/static/$PROJECT_NAME.json ${{ github.workspace }}/$PROJECT_NAME.template
          cd ${{ github.workspace }}
          zip ${{ github.workspace }}/content.zip $PROJECT_NAME.template
          cp ${{ github.workspace }}/content.zip ${{ github.workspace }}/assets
          
      - name: Upload workshop artifact
        uses: actions/upload-artifact@v4
        with:
          name: WorkshopArtifact
          path: |
            ${{ github.workspace }}/static/**/* \
            ${{ github.workspace }}/content/**/* \
            ${{ github.workspace }}/contentspec.yaml

      - name: Upload assets artifact
        uses: actions/upload-artifact@v4
        with:
          name: AssetsArtifact
          path: ${{ github.workspace }}/assets/**/*

      - name: Upload content artifact
        uses: actions/upload-artifact@v4
        with:
          name: ContentArtifact
          path: ${{ github.workspace }}/content.zip
  test:
    needs: [ build ]
    runs-on: codebuild-AwsLabsMultiAZWorkshopArm64GithubRunner-${{ github.run_id }}-${{ github.run_attempt }}
    env:
      BUCKET: workshop-pipeline-wspipelineartifactsbucket5608ec1-xqbqfqtepjdl
      PROJECT_NAME: ${{ github.event.repository.name }}
    steps:
      - name: Get workshop content
        uses: actions/download-artifact@v4
        with:
          name: ContentArtifact

      - name: Upload to S3
        run: |
          mkdir -p ${{ github.workspace }}/content
          unzip content.zip -d ${{ github.workspace }}/content
          aws s3 cp ${{ github.workspace }}/content s3://$BUCKET/ --recursive

      - name: Deploy change set
        run: |
          date=$(date --utc +"%Y-%m-%dT%H-%M-%SZ")
          aws cloudformation create-change-set --stack-name $PROJECT_NAME --change-set-name $date --template-url https://$BUCKET.s3.amazonaws.com/$PROJECT_NAME.template --parameters ParameterKey=AssetsBucketName,ParameterValue=$BUCKET ParameterKey=AssetsBucketPrefix,ParameterValue="" ParameterKey=ParticipantRoleName,ParameterValue=Admin --capabilities CAPABILITY_IAM --region $AWS_REGION
          aws cloudformation execute-change-set --stack-name $PROJECT_NAME --change-set-name $date --region $AWS_REGION
    
  wait_for_stack:
      runs-on: codebuild-AwsLabsMultiAZWorkshopArm64GithubRunner-${{ github.run_id }}-${{ github.run_attempt }}
      needs: [ test ]
      env:
        PROJECT_NAME: ${{ github.event.repository.name }}
      steps:
        - name: Wait for CloudFormation Stack to complete
          run: |
            echo "Waiting for CloudFormation stack to complete..."
            aws cloudformation wait stack-create-complete --stack-name $PROJECT_NAME --region $AWS_REGION
            if [ $? -ne 0 ]; then
              echo "CloudFormation stack deployment failed."
              exit 1
            else
              echo "CloudFormation stack deployed successfully."
            fi
          