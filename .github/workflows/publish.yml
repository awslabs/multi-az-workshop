name: publish

on:
  workflow_dispatch:
    inputs:
        aws_access_key_id:
          type: string
        aws_secret_access_key:
          type: string
        aws_session_token:
          type: string
        email:
          type: string
        version-bump:
          description: 'Version bump type (major, minor, patch)'
          type: choice
          options:
            - major
            - minor
            - patch
          required: true
          default: 'patch'
        prerelease:
          type: string
          description: If you want to make this a pre-release specify the value like 'alpha' or 'beta'

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
  AWS_SESSION_TOKEN: ${{ inputs.aws_session_token }}
  WORKSHOP_ID: e9383b42-6c6f-416b-b50a-9313e476e372
  USER_NAME: ${{ github.triggering_actor }}
  EMAIL: ${{ inputs.email }}
  REMOTE_REPO: advanced-multi-az-resilience-patterns
  GH_TOKEN: ${{ github.token }}

jobs:
  latest_workflow:
    runs-on: ubuntu-latest
    outputs:
        RUN_ID: ${{ steps.get_run.outputs.RUN_ID }}
    steps:
      - name: get run
        id: get_run
        run: |
          REPO=${{ github.repository }}
          WORKFLOW=build.yml

          RUN_ID=$(gh run list --workflow "$WORKFLOW" --status success --limit 1 --repo "$REPO" --json "databaseId" -q '.[0].databaseId')

          if [ -z "$RUN_ID" ]; then
            echo "No successful workflow runs found!"
            exit 1
          fi

          echo "Found the latest successful run ID: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_OUTPUT      

  assets:
    runs-on: ubuntu-latest
    needs: [ latest_workflow ]
    steps:
      - name: get_assets_artifact
        uses: actions/download-artifact@v4
        with:
          name: AssetsArtifact
          path: ${{ github.workspace }}/assets
          run-id: ${{ needs.latest_workflow.outputs.RUN_ID }}
          github-token: ${{ github.token }}

      - name: upload_assets
        run: aws s3 sync ${{ github.workspace }}/assets s3://ws-assets-us-east-1/$WORKSHOP_ID --delete

  workshop:
    runs-on: ubuntu-latest
    needs: [ latest_workflow ]
    steps:
      - name: get_workshop_artifact
        uses: actions/download-artifact@v4
        with:
          name: WorkshopArtifact
          path: ${{ github.workspace }}/workshop
          run-id: ${{ needs.latest_workflow.outputs.RUN_ID }}
          github-token: ${{ github.token }}

      - name: install remote codecommit
        run: |
          pip install git-remote-codecommit
          git config --global user.email $EMAIL
          git config --global user.name "$USER_NAME"

      - name: push workshop
        run: |
          git clone codecommit://$REMOTE_REPO ${{ github.workspace }}/$REMOTE_REPO
          cd ${{ github.workspace }}/$REMOTE_REPO
          find . -path ./.git -prune -o ! -name . ! -name .. -exec rm -rf {} + 2> /dev/null
          cp -r ${{ github.workspace }}/workshop/. ${{ github.workspace }}/$REMOTE_REPO
          git add -A
          git commit -m "New workshop version"
          git push

  bump_version_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: get_content_artifact
        uses: actions/download-artifact@v4
        with:
          name: ContentArtifact
          path: ${{ github.workspace }}/content
          run-id: ${{ needs.latest_workflow.outputs.RUN_ID }}
          github-token: ${{ github.token }}

      - name: Get latest release tag
        id: latest_release
        run: |
          latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          
          if [ -z "$latest_tag" ]; then
            echo "No release found. Starting with v0.0.0."
            latest_tag="v0.0.0"
          fi

          echo "Latest release tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Get commit messages since last release
        id: get_commits
        run: |
          # Get all commit messages since the last release         
          commits=$(git log ${{ env.latest_tag }}..HEAD --oneline --pretty=%B)
          echo "$commits"
          echo "commits=$commits" >> $GITHUB_ENV

      - name: Determine bump type
        id: bump_type
        run: |
            bump_type=""  # Ignore a commit that wasn't labeled appropriately
    
            # Analyze commit messages to determine the bump type
            commits="${{ env.commits }}"
            bump_type="patch"
            
            # Check for breaking changes (major bump)
            if [[ "$commits" =~ \bfeat!\b || "$commits" =~ \bBREAKING\sCHANGE\b ]]; then
              bump_type="major"
            # Check for features (minor bump)
            elif [[ "$commits" =~ \bfeat:\b ]]; then
              bump_type="minor"
            # Check for fixes (patch bump)
            elif [[ "$commits" =~ \bfix:\b || "$commits" =~ \bchore:\b ]]; then
              bump_type="patch"
            fi

            #if [ -z $bump_type ]; then
            #  echo "No matching commit message found, no version bump."
            #  exit 1
            #fi
    
            echo "Detected bump type: $bump_type"
            echo "bump_type=$bump_type" >> $GITHUB_ENV

      - name: Determine next version
        id: bump_version
        run: |
          bump_type="${{ github.event.inputs.version-bump }}"  # 'major', 'minor', or 'patch'
          prerelease_label_input="${{ github.event.inputs.prerelease }}"

          # If no release tag is found, start from v0.0.0
          if [ -z "$latest_tag" ]; then
            echo "No release found. Starting with v0.0.0."
            latest_tag="v0.0.0"
          else
            echo "Current version: $latest_tag"
          fi

          # Extract the version numbers from the tag (e.g., v1.2.3 -> [1, 2, 3])
          tag="${latest_tag//v/}"  # Remove 'v' prefix

          if [[ "$tag" =~ ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            prerelease="${BASH_REMATCH[4]}"  # Capture pre-release label, e.g., "alpha", "beta", etc.
            build_metadata="${BASH_REMATCH[6]}" # Build metadata (not used, but can be stored)

            if [ -n "$prerelease" ]; then
              prerelease_parts=(${prerelease//./ })  # Split label and version
              prerelease_label_in_tag="${prerelease_parts[0]}"
              prerelease_version_number="${prerelease_parts[1]}"

              if [[] -n "$prerelease_label_input" && "$prerelease_label_input" != "$prerelease_label_in_tag" ]]; then
                echo "Pre-release label mismatch. Resetting pre-release version."
                prerelease="${prerelease_label_input}.1"
              elif [[ -n "$prerelease_label_input" && "$prerelease_label_input" == "$prerelease_label_in_tag" ]]; then
                if [[ "$bump_type" == "patch" ]]; then
                  prerelease_version_number=$((prerelease_version_number + 1))
                  prerelease="${prerelease_label_input}.${prerelease_version_number}"
                else
                  prerelease="${prerelease_label_input}.1"
                fi
              else
                prerelease="${prerelease_label_input}.1"
              fi
            elif [ -n "$prerelease_label_input" ]; then
              prerelease="${prerelease_label_input}.1"
            fi

            # Bump the version based on the specified bump type
            case "$bump_type" in
              major)
                major=$((major + 1))
                minor=0
                patch=0
                prerelease="${prerelease_label_input}.1"  # Reset to .1 for major bumps
                ;;
              minor)
                minor=$((minor + 1))
                patch=0
                prerelease="${prerelease_label_input}.1"  # Reset to .1 for minor bumps
                ;;
              patch)
                # If there's no prerelease, increment the main patch version
                if [ -z "$prerelease" ]; then
                  patch=$((patch + 1))
                fi
                ;;
              *)
                echo "Invalid bump type: $bump_type"
                exit 1
                ;;
            esac

            # Create the new version tag
            if [ -n "$prerelease" ]; then
              echo "prerelease=$prereleast" >> $GITHUB_ENV
              bumped_version="v$major.$minor.$patch-$prerelease"
            else
              bumped_version="v$major.$minor.$patch"
            fi

            echo "Bumped version to: $bumped_version"
            echo "bumped_version=$bumped_version" >> $GITHUB_ENV

      - name: Create Git tag
        run: |
          git tag ${{ env.bumped_version }}
          git push origin ${{ env.bumped_version }}

      - name: Create a GitHub release
        run: |
          if [[ -n "${{ env.prerelease }}" ]]; then
            gh release create ${{ env.bumped_version }} --title "${{ env.bumped_version }}" --prerelease --verify-tag ${{ github.workspace }}/content/content.zip
          else
            gh release create ${{ env.bumped_version }} --title "${{ env.bumped_version }}" --verify-tag ${{ github.workspace }}/content/content.zip
          fi