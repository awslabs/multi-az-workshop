name: publish

on:
  workflow_dispatch:
    inputs:
        aws_access_key_id:
          type: string
        aws_secret_access_key:
          type: string
        aws_session_token:
          type: string
        email:
          type: string
        prerelease:
          type: string
          description: If you want to make this a pre-release specify the value like 'alpha' or 'beta'

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
  AWS_SESSION_TOKEN: ${{ inputs.aws_session_token }}
  WORKSHOP_ID: e9383b42-6c6f-416b-b50a-9313e476e372
  USER_NAME: ${{ github.triggering_actor }}
  EMAIL: ${{ inputs.email }}
  REMOTE_REPO: advanced-multi-az-resilience-patterns
  GH_TOKEN: ${{ github.token }}

jobs:
  latest_workflow:
    runs-on: ubuntu-latest
    outputs:
        RUN_ID: ${{ steps.get_run.outputs.RUN_ID }}
    steps:
      - name: get run
        id: get_run
        run: |
          REPO=${{ github.repository }}
          WORKFLOW=build.yml

          RUN_ID=$(gh run list --workflow "$WORKFLOW" --status success --limit 1 --repo "$REPO" --json "databaseId" -q '.[0].databaseId')

          if [ -z "$RUN_ID" ]; then
            echo "No successful workflow runs found!"
            exit 1
          fi

          echo "Found the latest successful run ID: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_OUTPUT      

  assets:
    runs-on: ubuntu-latest
    needs: [ latest_workflow ]
    steps:
      - name: get_assets_artifact
        uses: actions/download-artifact@v4
        with:
          name: AssetsArtifact
          path: ${{ github.workspace }}/assets
          run-id: ${{ needs.latest_workflow.outputs.RUN_ID }}
          github-token: ${{ github.token }}

      - name: upload_assets
        run: aws s3 sync ${{ github.workspace }}/assets s3://ws-assets-us-east-1/$WORKSHOP_ID --delete

  workshop:
    runs-on: ubuntu-latest
    needs: [ latest_workflow, assets ]
    steps:
      - name: get_workshop_artifact
        uses: actions/download-artifact@v4
        with:
          name: WorkshopArtifact
          path: ${{ github.workspace }}/workshop
          run-id: ${{ needs.latest_workflow.outputs.RUN_ID }}
          github-token: ${{ github.token }}

      - name: install remote codecommit
        run: |
          pip install git-remote-codecommit
          git config --global user.email $EMAIL
          git config --global user.name "$USER_NAME"

      - name: push workshop
        run: |
          git clone codecommit://$REMOTE_REPO ${{ github.workspace }}/$REMOTE_REPO
          cd ${{ github.workspace }}/$REMOTE_REPO
          find . -path ./.git -prune -o ! -name . ! -name .. -exec rm -rf {} + 2> /dev/null
          cp -r ${{ github.workspace }}/workshop/. ${{ github.workspace }}/$REMOTE_REPO
          # exits 1 if there are changes, which is interpreted as true
          set +e
          git diff --quiet
          if [ $? -eq 1 ]; then
            set -e
            git add -A
            git commit -m "New workshop version"
            git push
          else
            echo "No changes detected, nothing to commit"
          fi
            
  bump_version_and_release:
    runs-on: ubuntu-latest
    needs: [ latest_workflow, assets, workshop ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          branch: main

      - name: get_content_artifact
        uses: actions/download-artifact@v4
        with:
          name: ContentArtifact
          path: ${{ github.workspace }}/content
          run-id: ${{ needs.latest_workflow.outputs.RUN_ID }}
          github-token: ${{ github.token }}

      - name: Get latest release tag
        id: latest_release
        run: |
          cd ${{ github.workspace }}
          latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          
          if [ -z "$latest_tag" ]; then
            echo "No release found. Starting with v0.0.0."
            latest_tag="v0.0.0"
            # Get the total number of commits in the current branch
            #commit_count=$(git rev-list --count HEAD)
            #echo "Total commits: $commit_count"       
            # Set N to the smaller of 10 or the total number of commits
            #N=$((commit_count < 10 ? commit_count : 10))
            #commits=$(git log HEAD~$N..HEAD --oneline --pretty="%B")
          else
            #commits=$(git log $tag..HEAD --oneline --pretty="%B")
            echo "There is a latest tag: $latest_tag"
          fi   

          echo "Latest release tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          #echo "$commits"
          #echo "commits=$commits" >> $GITHUB_ENV

      - name: Determine bump type
        id: bump_type
        run: |
          bump_type="patch"
  
          # Analyze commit messages to determine the bump type
          #commits="${{ env.commits }}"
          
          # Check for breaking changes (major bump)
          #if [[ "$commits" =~ \bfeat!\b || "$commits" =~ \bBREAKING\sCHANGE\b ]]; then
          #  bump_type="major"
          # Check for features (minor bump)
          #elif [[ "$commits" =~ \bfeat:\b ]]; then
          #  bump_type="minor"
          # Check for fixes (patch bump)
          #elif [[ "$commits" =~ \bfix:\b || "$commits" =~ \bchore:\b ]]; then
          #  bump_type="patch"
          #fi
  
          #if [ -z $bump_type ]; then
          #  echo "No matching commit message found, no version bump."
          #  exit 1
          #fi
  
          echo "Detected bump type: $bump_type"
          echo "bump_type=$bump_type" >> $GITHUB_ENV

      - name: Determine next version
        id: bump_version
        run: |
          # Extract the version numbers from the tag (e.g., v1.2.3 -> [1, 2, 3])
          tag="${latest_tag//v/}"  # Remove 'v' prefix
          prerelease_label_input="${{ inputs.prerelease }}"
          regex="^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-((0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$"
     
          if [[ "$tag" =~ $regex ]]; then
            major="${BASH_REMATCH[1]}"  # major
            minor="${BASH_REMATCH[2]}"  # minor
            patch="${BASH_REMATCH[3]}"  # patch
            prerelease="${BASH_REMATCH[5]}"  # Capture pre-release label, e.g., "alpha", "beta", etc.
            build_metadata="${BASH_REMATCH[10]}" # Build metadata (not used, but can be stored)
            echo "MAJOR:        $major"
            echo "MINOR:        $minor"
            echo "PATCH:        $patch"
            echo "PRE-RELEASE:  $prerelease"
            echo "METADATA:     $build_metadata"
          
            # Bump the version based on the specified bump type
            case "$bump_type" in
              major)
                major=$((major + 1))
                minor=0
                patch=0
                prerelease="${prerelease_label_input}.1"  # Reset to .1 for major bumps
                ;;
              minor)
                minor=$((minor + 1))
                patch=0
                prerelease="${prerelease_label_input}.1"  # Reset to .1 for minor bumps
                ;;
              patch)
                if [ -n "$prerelease_label_input" ]; then
                  prerelease_parts=(${prerelease//./ })  # Split label and version
                  prerelease_label_in_tag="${prerelease_parts[0]}"
                  prerelease_version_number="${prerelease_parts[1]}"
          
                  if [[ "$prerelease_label_input" != "$prerelease_label_in_tag" ]]; then
                    echo "Pre-release label mismatch. Resetting pre-release version."
                    prerelease="${prerelease_label_input}.1"
                  else
                    echo "Pre-release labels match, incrementing patch version."
                    prerelease_version_number=$((prerelease_version_number + 1))
                    prerelease="${prerelease_label_input}.${prerelease_version_number}"
                  fi
                else
                  # If no existing pre-release, then increment the patch
                  # otherwise, we just drop the pre-release from the version
                  if [ -z "$prerelease" ]; then
                    patch=$((patch + 1))
                  fi
                fi
                ;;
              *)
                echo "Invalid bump type: $bump_type"
                exit 1
                ;;
            esac
          
            # Create the new version tag
            if [ -n "$prerelease" ]; then
              bumped_version="v$major.$minor.$patch-$prerelease"
            else
              bumped_version="v$major.$minor.$patch"
            fi
          
            echo "Bumped version to: $bumped_version"
            echo "bumped_version=$bumped_version" >> $GITHUB_ENV
          else
            echo "Tag $tag is invalid, reseting version to v0.0.1"
            bumped_version="v0.0.1"
            echo "bumped_version=$bumped_version" >> $GITHUB_ENV
          fi

      - name: Create Git tag
        run: |
          git tag ${{ env.bumped_version }}
          git push origin ${{ env.bumped_version }}

      - name: Create a GitHub release
        run: |
          if [[ -n "${{ env.prerelease }}" ]]; then
            gh release create ${{ env.bumped_version }} --title "${{ env.bumped_version }}" --prerelease --verify-tag ${{ github.workspace }}/content/content.zip
          else
            gh release create ${{ env.bumped_version }} --title "${{ env.bumped_version }}" --verify-tag ${{ github.workspace }}/content/content.zip
          fi
